require('dotenv').config();
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const mongoose = require('mongoose');

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(helmet());
app.use(morgan('dev'));
app.use(express.json());

// Routes placeholder
// app.use('/api/auth', require('./api/auth'));
// app.use('/api/guilds', require('./api/guilds'));
// app.use('/api/users', require('./api/users'));

// Basic health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok', message: 'Hearthgate API is running!' });
});

// Simple API test endpoint
app.get('/api', (req, res) => {
  res.status(200).json({ message: 'Welcome to Hearthgate API!' });
});

app.get('/', (req, res) => {
  res.status(200).json({ message: 'Welcome to Hearthgate API!' });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    error: 'Internal Server Error',
    message: process.env.NODE_ENV === 'production' ? 'Something went wrong' : err.message
  });
});

// Connect to MongoDB using async/await
const connectToDatabase = async () => {
  try {
    // Connection string from the Digital Ocean dashboard
    const mongoUri = "mongodb://doadmin:3b5f219NBK78eF0Z@db-mongodb-nyc1-28094-a75208be.mongo.ondigitalocean.com:27017/admin?tls=true&authSource=admin&replicaSet=db-mongodb-nyc1-28094";
    
    console.log('Attempting to connect to MongoDB...');
    await mongoose.connect(mongoUri, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      ssl: true,
      tls: true,
      tlsAllowInvalidHostnames: false,
      tlsAllowInvalidCertificates: false
    });
    console.log('Connected to MongoDB successfully!');
  } catch (error) {
    console.error('Could not connect to MongoDB:', error);
    console.error('Error details:', error.message);
  }
};

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  connectToDatabase();
});

// Handle graceful shutdown
const shutdown = async () => {
  console.log('Shutting down server gracefully...');
  try {
    await mongoose.connection.close();
    console.log('MongoDB connection closed');
    process.exit(0);
  } catch (err) {
    console.error('Error during shutdown:', err);
    process.exit(1);
  }
};

process.on('SIGINT', shutdown);
process.on('SIGTERM', shutdown);
